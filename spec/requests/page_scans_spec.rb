 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/page_scans", type: :request do

  # PageScan. As you add validations to PageScan, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { type: 'HtmlValidationPageScan',
      url: 'https://example.com'
    }
  }

  let(:invalid_attributes) {
    { url: 'not a url' }
  }

  describe "GET /index" do
    it "renders a successful response" do
      PageScan.create! valid_attributes
      get page_scans_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      page_scan = PageScan.create! valid_attributes
      get page_scan_url(page_scan)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "is not possible" do
      expect { get new_page_scan_url }.to raise_error(NameError, /undefined/)
      expect { get '/page_scans/new' }.to raise_error(ActiveRecord::RecordNotFound, /'id'=new/)
    end

    # it "renders a successful response" do
    #   get new_page_scan_url
    #   expect(response).to be_successful
    # end
  end

  describe "GET /edit" do
    it "is not possible" do
      expect { get edit_page_scan_url(-1) }.to raise_error(NameError, /undefined/)
      expect { get '/page_scans/-1/edit' }.to raise_error(ActionController::RoutingError, /edit/)
    end

    # it "render a successful response" do
    #   page_scan = PageScan.create! valid_attributes
    #   get edit_page_scan_url(page_scan)
    #   expect(response).to be_successful
    # end
  end

  describe "POST /create" do
    it "is not possible" do
      # expect { post page_scans_url }.to raise_error(NameError, /undefined/)
      expect { post '/page_scans' }.to raise_error(ActionController::RoutingError, /POST.*page_scans/)
    end

    # context "with valid parameters" do
    #   it "creates a new PageScan" do
    #     expect {
    #       post page_scans_url, params: { page_scan: valid_attributes }
    #     }.to change(PageScan, :count).by(1)
    #   end

    #   it "redirects to the created page_scan" do
    #     post page_scans_url, params: { page_scan: valid_attributes }
    #     expect(response).to redirect_to(page_scan_url(PageScan.last))
    #   end
    # end

    # context "with invalid parameters" do
    #   it "does not create a new PageScan" do
    #     expect {
    #       post page_scans_url, params: { page_scan: invalid_attributes }
    #     }.to change(PageScan, :count).by(0)
    #   end

    #   it "renders a successful response (i.e. to display the 'new' template)" do
    #     post page_scans_url, params: { page_scan: invalid_attributes }
    #     expect(response).to have_http_status(422) # Unprocessable entity
    #   end
    # end
  end

  describe "PATCH /update" do
    it "is not possible" do
      # expect { patch page_scan_url(-1) }.to raise_error(NameError, /undefined/)
      expect { patch '/page_scans/-1' }.to raise_error(ActionController::RoutingError, /PATCH.*page_scans/)
    end

    # context "with valid parameters" do
    #   let(:new_attributes) {
    #     { url: "https://updated.example.com" }
    #   }

    #   it "updates the requested page_scan" do
    #     page_scan = PageScan.create! valid_attributes
    #     patch page_scan_url(page_scan), params: { page_scan: new_attributes }
    #     page_scan.reload
    #     expect(page_scan.url).to eql("https://updated.example.com")
    #   end

    #   it "redirects to the page_scan" do
    #     page_scan = PageScan.create! valid_attributes
    #     patch page_scan_url(page_scan), params: { page_scan: new_attributes }
    #     page_scan.reload
    #     expect(response).to redirect_to(page_scan_url(page_scan))
    #   end
    # end

    # context "with invalid parameters" do
    #   it "renders a successful response (i.e. to display the 'edit' template)" do
    #     page_scan = PageScan.create! valid_attributes
    #     patch page_scan_url(page_scan), params: { page_scan: invalid_attributes }
    #     expect(response).to have_http_status(422) # Unprocessable entity
    #   end
    # end
  end

  describe "DELETE /destroy" do
    it "destroys the requested page_scan" do
      page_scan = PageScan.create! valid_attributes
      expect {
        delete page_scan_url(page_scan)
      }.to change(PageScan, :count).by(-1)
    end

    it "redirects to the page_scans list" do
      page_scan = PageScan.create! valid_attributes
      delete page_scan_url(page_scan)
      expect(response).to redirect_to(page_scans_url)
    end
  end
end
