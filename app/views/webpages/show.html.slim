h1= "Webpage \"#{@webpage.name}\""

p
  strong Url:
  = @webpage.url

p
  strong Website:
  = link_to_if @webpage.website, @webpage.website.try(:name), @webpage.website

hr

- last_scans = @webpage.last_scans
- if last_scans.blank?
  h2
    | Last Scans
    subheader
      |&nbsp;(none)
- else
  h2
    | Last Scans
    subheader
      |&nbsp;(
      = link_to('history', page_scans_path(webpage_id: @webpage.id))
      | )

  - last_scans.each do |page_scan|

    - if page_scan.scanned_at?
      = render partial: 'page_scan', object: page_scan
    - else
      h3[data={id: dom_id(page_scan)}]
        =page_scan.type.titleize
        subheader[title='Refresh page to check results']
          |&nbsp;Scanning...
        i.busy-scanning[title='Refresh page to check results']

hr
- queued_scans = @webpage.page_scans.queued.order(:created_at)
- if queued_scans.blank?
  h2
    | Queued Scans
    subheader
      |&nbsp;(none)
- else
  h2
    | Queued Scans&nbsp;
    subheader= "(#{queued_scans.size}) Refresh page to check results"
  ol
    - queued_scans.each do |queued_scan|
      li[data={id: dom_id(queued_scan)}]
        span.scan_type = queued_scan.type.titleize
        |&nbsp;(Created at:&nbsp;
        - created_at = queued_scan.created_at
        span.date[title=created_at] = time_ago_in_words(created_at, include_seconds: true)
        |&nbsp;ago)
hr

=> link_to 'Edit', edit_webpage_path(@webpage)
'|
=< link_to 'Back', webpages_path
